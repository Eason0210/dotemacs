* OS Specifics
** Default values
*** Default font = inconsolata
#+begin_src emacs-lisp
(setq default-font "Inconsolata-10")
(setq large-font "Inconsolata-13")
#+end_src
*** Path to cedet
#+begin_src emacs-lisp
(setq cedet-dir "/home/bdeane/dev/cedet/")
#+end_src
*** Default frame height, width
#+begin_src emacs-lisp
(setq default-frame-height 78)
#+end_src
*** Column to wrap at
#+begin_src emacs-lisp
(setq column-wrap-soft 80)
(setq column-wrap-hard 100)
#+end_src
*** Use SBCL
#+begin_src emacs-lisp
(setq inferior-lisp-program "sbcl")
#+end_src
** Mac
*** Alt = meta
#+begin_src emacs-lisp
(if (eq system-type 'darwin)
    (setq mac-command-modifier 'meta))
#+end_src
** Windows
*** Get the clipboard to work
#+begin_src emacs-lisp
(if (eq system-type 'windows-nt)
    (set-clipboard-coding-system 'utf-16le-dos))
#+end_src
*** Use Consolas
#+begin_src emacs-lisp
(if (eq system-type 'windows-nt)
    (setq default-font "-outline-Consolas-normal-r-normal-normal-13-97-96-96-c-*-iso8859-1")
    (setq large-font "-outline-Consolas-normal-r-normal-normal-16-97-96-96-c-*-iso8859-1"))
#+end_src
*** Path overrides
#+begin_src emacs-lisp
(if (eq system-type 'windows-nt)
    (setq cedet-dir "e:/projects/cedet/"))
#+end_src
*** Use CLISP
#+begin_src emacs-lisp
(if (eq system-type 'windows-nt)
    (setq inferior-lisp-program "clisp.exe"))
#+end_src
*** Frame height = 74
#+begin_src emacs-lisp
(if (eq system-type 'windows-nt)
    (setq default-frame-height 74))
#+end_src
** Cygwin
*** Get the clipboard to work
#+begin_src emacs-lisp
(if (eq system-type 'cygwin)
    (set-clipboard-coding-system 'utf-16le-dos))
#+end_src
*** Use Consolas
#+begin_src emacs-lisp
(if (eq system-type 'cygwin)
    (setq default-font "Consolas-10"))
#+end_src
*** Path overrides
#+begin_src emacs-lisp
(if (eq system-type 'cygwin)
    (setq cedet-dir "/cygdrive/e/projects/cedet/"))
#+end_src
*** Use CLISP
#+begin_src emacs-lisp
(if (eq system-type 'cygwin)
    (setq inferior-lisp-program "clisp.exe"))
#+end_src
*** Frame height = 74
#+begin_src emacs-lisp
(if (eq system-type 'cygwin)
    (setq default-frame-height 74))
#+end_src
* Basic things
** Tidier UI
*** Turn off toolbar, menu bar, etc
#+begin_src emacs-lisp
(tool-bar-mode -1)
(menu-bar-mode -1)
(display-battery-mode -1)
(scroll-bar-mode -1)
#+end_src
*** Inhibit splash screen and start with empty scratch buffer
#+begin_src emacs-lisp
(setq inhibit-startup-screen t)
(setq initial-scratch-message "")
#+end_src
*** Prevent annoying beep - use visible bell
#+begin_src emacs-lisp
(setq visible-bell 1)
#+end_src
** Frame
#+begin_src emacs-lisp
(setq frame-title-format "%b [emacs]")
(setq default-frame-alist
      (append
       (list
	`(width . ,column-wrap-hard)
	`(height . ,default-frame-height)
        `(font . ,default-font))
       default-frame-alist))
#+end_src
** Coding system UTF-8
#+begin_src emacs-lisp
(prefer-coding-system 'utf-8)
(set-default-coding-systems 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(setq default-buffer-file-coding-system 'utf-8)
#+end_src
** Autosaves/backups
*** Move autosave/backup files to ~/.emacs.d/autosaves and ~/.emacs.d/backups

#+begin_src emacs-lisp
(setq backup-directory-alist
      `((".*" . , "~/.emacs.d/backups/")))
(setq auto-save-file-name-transforms
      `((".*" ,"~/.emacs.d/autosaves/" t)))
#+end_src

*** Ensure directory exists
#+begin_src emacs-lisp
(make-directory "~/.emacs.d/backups" t)
(make-directory "~/.emacs.d/autosaves" t)
#+end_src
*** Remove old backups
Remove backups older than one week

#+begin_src emacs-lisp
(message "Deleting old backup files...")
(let ((week (* 60 60 24 7))
      (current (float-time (current-time))))
  (dolist (file (directory-files temporary-file-directory t))
    (when (and (backup-file-name-p file)
               (> (- current (float-time (fifth (file-attributes file))))
                  week))
      (message file)
      (delete-file file))))
#+end_src
** Mode line
*** Add column-number
#+begin_src emacs-lisp
(column-number-mode)
#+end_src
** Scroll behaviour
*** Don't jump a half-page when scrolling
#+begin_src emacs-lisp
(setq scroll-conservatively 10000)
#+end_src
* Whitespace rules
** Use spaces, not tabs
#+begin_src emacs-lisp
(setq-default indent-tabs-mode nil)
#+end_src
** On save, add newline at end and delete trailing whitespace
#+begin_src emacs-lisp
(defun my-delete-trailing-whitespace ()
  (if (eq indent-tabs-mode nil)
      (delete-trailing-whitespace)))
(add-hook 'before-save-hook 'my-delete-trailing-whitespace)
(setq require-final-newline t)
#+end_src
** One space after period
#+begin_src emacs-lisp
(setq sentence-end-double-space nil)
#+end_src
** Two space tabs
#+begin_src emacs-lisp
(setq default-tab-width 2)
#+end_src
** Wrap at column 80, mark at 80 (soft) and 100 (hard)
#+begin_src emacs-lisp
(setq-default fill-column column-wrap-soft)
(autoload 'column-marker-2 "column-marker" "Highlight a column." t)
(add-hook 'c++-mode-hook (lambda () (interactive) (column-marker-1 column-wrap-soft)))
(add-hook 'c++-mode-hook (lambda () (interactive) (column-marker-2 column-wrap-hard)))
#+end_src
* Global key mappings
#+begin_src emacs-lisp
(global-set-key "\C-z" 'undo)
(global-set-key "\C-o" 'goto-line)
(global-set-key "\M-r" 'replace-string)
(global-set-key "\M-k" 'compile)
(global-set-key "\C-cz" 'goto-last-change)
(global-set-key [(meta return)] 'toggle-max-frame)
#+end_src
** Turn off insert
#+begin_src emacs-lisp
(global-set-key [insert] (lambda () (interactive)))
(global-set-key [insertchar] (lambda () (interactive)))
#+end_src
** Access killring menu
#+begin_src emacs-lisp
(global-set-key "\C-cy" '(lambda () (interactive) (popup-menu 'yank-menu)))
#+end_src
** Cycle buffers with F7/F8
#+begin_src emacs-lisp
(global-set-key [f7] 'previous-buffer)
(global-set-key [f8] 'next-buffer)
#+end_src
** Cycle windows with F5/F6
#+begin_src emacs-lisp
(global-set-key [f5] 'other-window)
(global-set-key [f6] (lambda () (interactive) (other-window -1)))
#+end_src
** Windmove with C-c <arrow>
#+begin_src emacs-lisp
(global-set-key (kbd "C-c <left>")  'windmove-left)
(global-set-key (kbd "C-c <right>") 'windmove-right)
(global-set-key (kbd "C-c <up>")    'windmove-up)
(global-set-key (kbd "C-c <down>")  'windmove-down)
#+end_src
** Home cycles between beginning of line and indent
#+begin_src emacs-lisp
(defun beginning-of-line-or-indentation ()
  "move to beginning of line, or indentation"
  (interactive)
  (if (bolp)
      (back-to-indentation)
    (beginning-of-line)))

(global-set-key [home] 'beginning-of-line-or-indentation)
#+end_src
** Tab behaviour
#+begin_src emacs-lisp
(global-set-key [(tab)] 'smart-tab)
#+end_src
** Minimap toggle
#+begin_src emacs-lisp
(defun minimap-toggle ()
  "Toggle minimap for current buffer."
  (interactive)
  (if (not (boundp 'minimap-bufname))
      (setf minimap-bufname nil))
  (if (null minimap-bufname)
      (progn (minimap-create)
	     (set-frame-width (selected-frame) (+ (/ (* column-wrap-hard 5) 4) 4)))
    (progn (minimap-kill)
	   (set-frame-width (selected-frame) column-wrap-hard))))
(global-set-key "\M-m" 'minimap-toggle)
#+end_src
** Highlight symbol
#+begin_src emacs-lisp
(global-set-key [(control f3)] 'highlight-symbol-at-point)
(global-set-key [f3] 'highlight-symbol-next)
(global-set-key [(shift f3)] 'highlight-symbol-prev)
#+end_src
** Bookmarks
#+begin_src emacs-lisp
(global-set-key [(control f2)] 'bm-toggle)
(global-set-key [f2] 'bm-next)
(global-set-key [(shift f2)] 'bm-previous)
#+end_src
* Auto modes
#+begin_src emacs-lisp
(setq auto-mode-alist (append '(("\\.mm$" . objc-mode)
                                ("\\.h$" . c++-mode)
                                ("\\.hs$" . haskell-mode)
                                ("SConstruct" . python-mode)
                                ("SConscript" . python-mode)
                                ("\\.presql$" . sql-mode)
                                ("\\.sql$" . sql-mode)
                                ("\\.lua$" . lua-mode)
                                ("\\.ml[iyl]?$" . caml-mode)
                                ("\\.pb$" . protobuf-mode)
                                ("\\.cs$" . csharp-mode)
                                ("\\.qml$" . js2-mode)
                                ("\\.ui$" . nxml-mode)
                                ("\\.org$" . org-mode)
                                ("\\.json$" . json-mode)
                                ("\\.proto$" . protobuf-mode))
                              auto-mode-alist))
#+end_src
** Guess mode for new buffer
#+begin_src emacs-lisp
(setq default-major-mode
      (lambda () (let ((buffer-file-name (or buffer-file-name (buffer-name))))
                   (set-auto-mode))))
#+end_src
* Colors
** Syntax highlighting customizations
#+begin_src emacs-lisp
(defun color-customizations ()
  (set-face-foreground 'font-lock-comment-face "gray")
  (set-face-foreground 'font-lock-string-face "FireBrick")
  (set-face-foreground 'font-lock-warning-face "black")
  (set-face-background 'font-lock-warning-face "orange")
  (set-face-background 'region "moccasin")
  (set-face-foreground 'region "navy"))
#+end_src
** Color themes
#+begin_src emacs-lisp
(defun normal-color-theme()
  (interactive)
  (color-theme-standard)
  (color-customizations))
(defun dark-color-theme()
  (interactive)
  (color-theme-midnight))
#+end_src
* Dired customizations
#+begin_src emacs-lisp
(add-hook 'dired-mode-hook 'hl-line-mode)
#+end_src
* Utility functions
** Insert date/time
#+begin_src emacs-lisp
(defvar current-date-time-format "%a %b %d %H:%M:%S %Y"
  "Format of date to insert with `insert-current-date-time' func
See help of `format-time-string' for possible replacements")

(defvar current-time-format "%a %H:%M:%S"
  "Format of date to insert with `insert-current-time' func.
Note the weekly scope of the command's precision.")

(defun insert-current-date-time ()
  "insert the current date and time into current buffer.
Uses `current-date-time-format' for the formatting the date/time."
  (interactive)
  (insert (format-time-string current-date-time-format (current-time)))
  (insert "\n")
  )

(defun insert-current-time ()
  "insert the current time (1-week scope) into the current buffer."
  (interactive)
  (insert (format-time-string current-time-format (current-time)))
  (insert "\n")
  )

(global-set-key "\C-c\C-d" 'insert-current-date-time)
(global-set-key "\C-c\C-t" 'insert-current-time)
#+end_src
** Nuke all buffers (except scratch)
#+begin_src emacs-lisp
(defun nuke-all-buffers ()
  "kill all buffers, leaving *scratch* only"
  (interactive)
  (mapcar (lambda (x) (kill-buffer x))
    (buffer-list))
  (delete-other-windows))
#+end_src
** ANSI colors
#+begin_src emacs-lisp
(require 'ansi-color)
(require 'tty-format)
(add-hook 'find-file-hooks 'tty-format-guess)
(defun colorize-buffer ()
  "apply ansi color codes to current buffer"
  (interactive)
  (ansi-color-apply-on-region (point-min) (point-max)))
#+end_src
** Eval last sexp and replace with result
#+begin_src emacs-lisp
(defun eval-and-replace ()
  "Replace the preceding sexp with its value."
  (interactive)
  (backward-kill-sexp)
  (condition-case nil
      (prin1 (eval (read (current-kill 0)))
             (current-buffer))
    (error (message "Invalid expression")
           (insert (current-kill 0)))))
(global-set-key (kbd "\C-x\C-e") 'eval-and-replace)
#+end_src
* Project-specific indent rules
#+begin_src emacs-lisp
(defun normal-indent-rules ()
  (interactive)
  (setq indent-tabs-mode nil)
  (setq default-tab-width 2)
  (setq c-basic-offset 2)
  (setq c-basic-indent 2))
(defun phoenix-indent-rules ()
  (interactive)
  (setq indent-tabs-mode t)
  (setq default-tab-width 4)
  (setq c-basic-offset 4)
  (setq c-basic-indent 4))
#+end_src
* Language modes
** C/C++
*** 2-space basic offset
#+begin_src emacs-lisp
(setq-default c-basic-offset 2)
#+end_src
*** FIXME or TODO get highlighted
#+begin_src emacs-lisp
(font-lock-add-keywords 'c++-mode
  '(("\\<\\(FIXME\\|TODO\\).*?:" 0 font-lock-warning-face prepend)))
#+end_src
*** Common indentation rules
#+begin_src emacs-lisp
(defun indentation-c++-mode-hook ()
  (c-set-offset 'substatement-open 0)
  (c-set-offset 'brace-list-open 0)
  (c-set-offset 'member-init-cont '-)
  (c-set-offset 'arglist-intro '++)
  (c-set-offset 'case-label '+)
  (c-set-offset 'statement-case-open 0))
(add-hook 'c++-mode-hook 'indentation-c++-mode-hook)
#+end_src
*** Infer tabs or spaces
#+begin_src emacs-lisp
(defun how-many-region (begin end regexp &optional interactive)
  "Print number of non-trivial matches for REGEXP in region.
  Non-interactive arguments are Begin End Regexp"
  (interactive "r\nsHow many matches for (regexp): \np")
  (let ((count 0) opoint)
    (save-excursion
      (setq end (or end (point-max)))
      (goto-char (or begin (point)))
      (while (and (< (setq opoint (point)) end)
                  (re-search-forward regexp end t))
        (if (= opoint (point))
            (forward-char 1)
          (setq count (1+ count))))
      (if interactive (message "%d occurrences" count))
      count)))
(defun infer-indentation-style ()
  ;; if our source file uses tabs, we use tabs, if spaces spaces, and if
  ;; neither, we use the current indent-tabs-mode
  (let ((space-count (how-many-region (point-min) (point-max) "^  "))
        (tab-count (how-many-region (point-min) (point-max) "^\t")))
    (if (> space-count tab-count) (normal-indent-rules))
    (if (> tab-count space-count) (phoenix-indent-rules))))
(add-hook 'c++-mode-hook 'infer-indentation-style)
#+end_src
*** Fill paras properly with doxygen comments
#+begin_src emacs-lisp
(defun setup-doxygen-fill ()
  (setq paragraph-separate "^\\s-*//!?\\s-*$"))
(add-hook 'c++-mode-hook 'setup-doxygen-fill)
#+end_src
** Python
*** 2-space basic offset
#+begin_src emacs-lisp
(setq python-indent 2)
#+end_src
*** FIXME or TODO get highlighted
#+begin_src emacs-lisp
(font-lock-add-keywords 'python-mode
  '(("\\<\\(FIXME\\|TODO\\).*?:" 0 font-lock-warning-face prepend)))
#+end_src
** Ocaml
#+begin_src emacs-lisp
(add-hook 'caml-mode-hook (lambda() (require 'caml-font)))
#+end_src
** Lua
*** 2-space basic offset
#+begin_src emacs-lisp
(setq lua-indent-level 2)
#+end_src
** Javascript
*** 2-space basic offset
#+begin_src emacs-lisp
(setq js-indent-level 2)
#+end_src
** SQL
#+begin_src emacs-lisp
(font-lock-add-keywords 'sql-mode
  '(("\\s-*//.*$" 0 font-lock-comment-face prepend)))
#+end_src
** Protobufs
#+begin_src emacs-lisp
(autoload 'protobuf-mode "protobuf-mode" "Protocol buffer editing mode" t)
#+end_src
** Common Lisp
*** Use SLIME with lisp files
#+begin_src emacs-lisp
(add-hook 'lisp-mode-hook
          (lambda ()
            (slime-mode t)
            (local-set-key "\r" 'newline-and-indent)
            (setq lisp-indent-function 'common-lisp-indent-function)))
#+end_src
** Emacs Lisp
*** Byte-compile elisp files on save
#+begin_src emacs-lisp
(defun byte-compile-current-buffer ()
  "`byte-compile' current buffer if it's emacs-lisp-mode and compiled file exists."
  (interactive)
  (when (and (eq major-mode 'emacs-lisp-mode)
             (file-exists-p (byte-compile-dest-file buffer-file-name)))
    (byte-compile-file buffer-file-name)))

(add-hook 'after-save-hook 'byte-compile-current-buffer)
#+end_src
** Haskell
#+begin_src emacs-lisp
(add-hook 'haskell-mode-hook 'turn-on-haskell-indentation)
#+end_src
* Compiling
** M-up and M-down to go between errors
#+begin_src emacs-lisp
(global-set-key [\M-up] 'previous-error)
(global-set-key [\M-down] 'next-error)
#+end_src
** Scons
*** Map compile errors from build dir to src dir
#+begin_src emacs-lisp
;; SCons builds into a 'build' subdir, but we want to find the errors
;; in the regular source dir.  So we remove build/XXX/YYY/{dbg,final}/ from the
;; filenames.
(defun process-error-filename (filename)
  (let ((case-fold-search t))
    (setq f (replace-regexp-in-string
             "[Ss]?[Bb]uild[\\/].*\\(final\\|dbg\\)[^\\/]*[\\/]" "" filename))
    (cond ((file-exists-p f)
           f)
          (t filename))))
(setq compilation-parse-errors-filename-function 'process-error-filename)
#+end_src
*** On compile, search for SConstruct in parent directories recursively
#+begin_src emacs-lisp
;; inspired by jds-find-tags-file in http://www.emacswiki.org/emacs/EmacsTags
(defun find-sconstruct ()
  "recursively searches upwards from buffer's current dir for file named SConstruct and returns that dir. Or nil if not found or if buffer is not visiting a file"
  (labels
      ((find-sconstruct-r (path)
                          (let* ((parent (file-name-directory path))
                                 (possible-file (concat parent "SConstruct")))
                            (cond
                             ((file-exists-p possible-file)
                              (throw 'found-it possible-file))
                             ((string= "/SConstruct" possible-file)
                              (error "No SConstruct found"))
                             (t (find-sconstruct-r (directory-file-name parent)))))))
    (if (buffer-file-name)
        (catch 'found-it
          (find-sconstruct-r (buffer-file-name)))
      (error "Buffer is not visiting a file"))))

(defun project-root ()
  (file-name-directory (find-sconstruct)))

(if (eq system-type 'cygwin)
    (setq compile-command '(concat "cd " (project-root) " && /usr/local/bin/scons"))
    (setq compile-command '(concat "cd " (project-root) " && scons")))
(setq compilation-read-command nil)
#+end_src

* Tools
** Git
*** Use magit
#+begin_src emacs-lisp
(global-set-key
 "\C-cg"
 (lambda ()
   (interactive)
   (call-interactively 'magit-status)))
#+end_src
*** Use mo-git-blame
#+begin_src emacs-lisp
(global-set-key
 "\C-cb"
 (lambda ()
   (interactive)
   (call-interactively 'mo-git-blame-current)))
#+end_src
** Doxygen
#+begin_src emacs-lisp
(require 'doxygen)
(global-set-key "\C-cd" 'doxygen-insert-function-comment)
#+end_src
** Uniquify filenames with <>
#+begin_src emacs-lisp
(require 'uniquify)
(setq uniquify-buffer-name-style 'post-forward-angle-brackets)
#+end_src
** Find file at point
#+begin_src emacs-lisp
(defadvice ffap-file-at-point (after ffap-file-at-point-after-advice ())
  (if (string= ad-return-value "/")
      (setq ad-return-value nil)))
(ad-activate 'ffap-file-at-point)
#+end_src
** Interactively do things
#+begin_src emacs-lisp
(setq ido-enable-flex-matching t)
(setq ido-everywhere t)
(setq ido-use-filename-at-point nil) ;'guess)
(setq ido-create-new-buffer 'always)
(ido-mode 1)
#+end_src
** Dabbrev customization
#+begin_src emacs-lisp
(setq save-abbrevs nil)
(setq case-replace nil)
#+end_src
** Tags
#+begin_src emacs-lisp
;; automatically reload the TAGS file without asking when it's updated
(setq tags-revert-without-query 1)
#+end_src
** Recent files
*** Enable recentf mode
Also limit to 25 files
#+begin_src emacs-lisp
(require 'recentf)
(setq recentf-max-menu-items 25)
#+end_src

*** Don't clean up recent files
It potentially access network drives, which could trigger tramp,
http://stackoverflow.com/questions/880625

#+begin_src emacs-lisp
(setq recentf-auto-cleanup 'never)
#+end_src

*** Bind to C-x C-r
"C-x r" would be better, but it interfers with "C-x r k" for kill-rectangle
#+begin_src emacs-lisp
(global-set-key "\C-x\ \C-r" 'recentf-open-files)
#+end_src
* Shell things
** Names of shell buffers
#+begin_src emacs-lisp
(defvar my-local-shells
  '("*eshell*" "*shell*" "*shell0*" "*shell1*" "*shell2*" "*shell3*"))
#+end_src
** Custom vars
#+begin_src emacs-lisp
(custom-set-variables
 '(comint-scroll-to-bottom-on-input t)  ; always insert at the bottom
 '(comint-scroll-to-bottom-on-output nil) ; always add output at the bottom
 '(comint-scroll-show-maximum-output t) ; scroll to show max possible output
 ;; '(comint-completion-autolist t)     ; show completion list when ambiguous
 '(comint-input-ignoredups t)           ; no duplicates in command history
 '(comint-completion-addsuffix t)       ; insert space/slash after file completion
 '(comint-buffer-maximum-size 20000)    ; max length of the buffer in lines
 '(comint-prompt-read-only nil)         ; if this is t, it breaks shell-command
 '(comint-get-old-input (lambda () "")) ; what to run when i press enter on a
                                        ; line above the current prompt
 '(comint-input-ring-size 5000)         ; max shell history size
 '(protect-buffer-bury-p nil))
#+end_src
** Truncate buffers continuously
#+begin_src emacs-lisp
(add-hook 'comint-output-filter-functions 'comint-truncate-buffer)
#+end_src
** Make the output read only
#+begin_src emacs-lisp
(defun make-my-shell-output-read-only (text)
  "Add to comint-output-filter-functions to make stdout read only in my shells."
  (if (member (buffer-name) my-local-shells)
      (let ((inhibit-read-only t)
            (output-end (process-mark (get-buffer-process (current-buffer)))))
        (put-text-property comint-last-output-start output-end 'read-only t))))
(add-hook 'comint-output-filter-functions 'make-my-shell-output-read-only)
#+end_src
** Colour in shells
#+begin_src emacs-lisp
(add-hook 'shell-mode-hook 'ansi-color-for-comint-mode-on)
#+end_src
** Open a bash shell
#+begin_src emacs-lisp
(defun bash-shell ()
  "Opens a bash shell."
  (interactive)
  (let ((explicit-shell-file-name "bash")
        (explicit-bash-args '("--login" "-i")))
    (call-interactively 'shell)))
(global-set-key (kbd "C-c s") 'bash-shell)
#+end_src
** Repeat last shell buffer input
#+begin_src emacs-lisp
(defun repeat-last-command-in-eshell ()
  "Repeat the last command that the *eshell* buffer did."
  (interactive)
  (let ((buf (current-buffer)))
    (if (get-buffer "*eshell*")
        (progn
          (display-buffer "*eshell*" t)
          (switch-to-buffer-other-window "*eshell*")
          (end-of-buffer)
          (eshell-kill-input)
          (insert (eshell-get-history 0))
          (eshell-send-input)
          (end-of-buffer)
          (switch-to-buffer-other-window buf)))))

(defun repeat-last-command-in-comint-shell ()
  "Repeat the last command that the *shell* buffer did."
  (interactive)
  (with-current-buffer (get-buffer "*shell*")
    (comint-previous-input 0)
    (comint-send-input nil t)))

(defun repeat-last-command-in-shell ()
  "Repeat the last command that the (e)shell buffer did."
  (interactive)
  (cond ((get-buffer "*eshell*")
         (repeat-last-command-in-eshell))
        ((get-buffer "*shell*")
         (repeat-last-command-in-comint-shell))))

(global-set-key (kbd "C-c r") 'repeat-last-command-in-shell)
#+end_src
** Use external ls
#+begin_src emacs-lisp
(setq ls-lisp-use-insert-directory-program t)
(setq insert-directory-program "/bin/ls")
#+end_src
** Run test on successful compilation
#+begin_src emacs-lisp
(setq compilation-finish-functions 'compile-autoclose)
(defun compile-autoclose (buffer string)
  (cond ((string-match "finished" string)
         (message "Build maybe successful: running tests.")
         (run-with-timer 1 nil 'repeat-last-command-in-shell))))
#+end_src
* Org mode
#+begin_src emacs-lisp
(require 'org-install)
(define-key global-map "\C-cl" 'org-store-link)
(define-key global-map "\C-cc" 'org-capture)
(define-key global-map "\C-ca" 'org-agenda)
(define-key global-map "\C-ci" 'org-iswitchb)
(setq org-log-done t)
(setq org-support-shift-select t)
(add-hook 'org-mode-hook
  (lambda ()
    (define-key org-mode-map "\M-Q" 'toggle-truncate-lines)))
(setq org-startup-indented t)
(setq org-export-latex-listings 'minted)
(setq org-export-latex-minted-options
           '(("frame" "lines")
             ("fontsize" "\\scriptsize")
             ("linenos" "")))
(setq org-src-fontify-natively t)
#+end_src
* CEDET
see https://github.com/alexott/emacs-configs/blob/master/rc/emacs-rc-cedet.el
#+begin_src emacs-lisp
;; if using a local cedet version, try that, otherwise try a default
(if (file-accessible-directory-p cedet-dir)
    (progn
      (load-file (concat cedet-dir "cedet-devel-load.el"))
      (add-to-list 'load-path (concat cedet-dir "contrib/"))
      (add-to-list 'Info-directory-list (concat cedet-dir "doc/info/")))
    (require 'cedet))

;;(add-to-list 'semantic-default-submodes 'global-semantic-idle-summary-mode)
(add-to-list 'semantic-default-submodes 'global-semantic-mru-bookmark-mode)
(add-to-list 'semantic-default-submodes 'global-semanticdb-minor-mode)
(add-to-list 'semantic-default-submodes 'global-semantic-idle-scheduler-mode)
;(add-to-list 'semantic-default-submodes 'global-semantic-stickyfunc-mode)
(add-to-list 'semantic-default-submodes 'global-cedet-m3-minor-mode)
(add-to-list 'semantic-default-submodes 'global-semantic-highlight-func-mode)
;;(add-to-list 'semantic-default-submodes 'global-semantic-show-unmatched-syntax-mode)
;;(add-to-list 'semantic-default-submodes 'global-semantic-highlight-edits-mode)
;;(add-to-list 'semantic-default-submodes 'global-semantic-show-parser-state-mode)
(add-to-list 'semantic-default-submodes 'global-semanticdb-minor-mode)

;; Activate semantic
(semantic-mode 1)

(require 'semantic/bovine/c)
(require 'semantic/bovine/el)
(require 'semantic/bovine/gcc)
(require 'semantic/bovine/clang)
(require 'semantic/ia)
(require 'semantic/decorate/include)
(require 'semantic/lex-spp)
(require 'eassist)

;; customisation of modes
(defun alexott/cedet-hook ()
  (local-set-key [(control return)] 'semantic-ia-complete-symbol-menu)
  (local-set-key "\C-c?" 'semantic-ia-complete-symbol)
  ;;
  (local-set-key "\C-c>" 'semantic-complete-analyze-inline)
  (local-set-key "\C-c=" 'semantic-decoration-include-visit)

  (local-set-key "\C-cj" 'semantic-ia-fast-jump)
  (local-set-key "\M-." 'semantic-ia-fast-jump)
  (local-set-key "\C-cq" 'semantic-ia-show-doc)
  (local-set-key "\C-cs" 'semantic-ia-show-summary)
  (local-set-key "\C-cp" 'semantic-analyze-proto-impl-toggle)
  (local-set-key (kbd "C-c <left>") 'senator-fold-tag)
  (local-set-key (kbd "C-c <right>") 'senator-unfold-tag)

  (local-set-key [f12] 'semantic-ia-fast-jump)
  (local-set-key [(shift f12)] 'semantic-mrub-switch-tags)

  (add-to-list 'ac-sources 'ac-source-semantic)
  )

;; (add-hook 'semantic-init-hooks 'alexott/cedet-hook)
(add-hook 'c-mode-common-hook 'alexott/cedet-hook)

(defun alexott/c-mode-cedet-hook ()
 ;; (local-set-key "." 'semantic-complete-self-insert)
 ;; (local-set-key ">" 'semantic-complete-self-insert)
  (local-set-key "\C-x\C-h" 'eassist-switch-h-cpp)
  (local-set-key "\C-cm" 'eassist-list-methods)
  (local-set-key "\C-c\C-r" 'semantic-symref)

;; (add-to-list 'ac-sources 'ac-source-etags)
;; (add-to-list 'ac-sources 'ac-source-gtags)
  (setq ac-sources '(ac-source-semantic-raw))
  )

(add-hook 'c-mode-common-hook 'alexott/c-mode-cedet-hook)

(semanticdb-enable-gnu-global-databases 'c-mode t)
(semanticdb-enable-gnu-global-databases 'c++-mode t)

(when (cedet-ectag-version-check t)
  (semantic-load-enable-primary-ectags-support))

;; SRecode
(global-srecode-minor-mode 1)

;; EDE
(global-ede-mode 1)
(ede-enable-generic-projects)
#+end_src
* Multiple cursors
#+begin_src emacs-lisp
(global-set-key (kbd "C->") 'mc/mark-next-like-this)
(global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
(global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)
#+end_src
* Package management
** Use GNU, ELPA, Marmalade and MELPA
#+begin_src emacs-lisp
(setq package-archives '(("gnu" . "http://elpa.gnu.org/packages/")
                         ("elpa" . "http://tromey.com/elpa/")
                         ("marmalade" . "http://marmalade-repo.org/packages/")
                         ("melpa" . "http://melpa.milkbox.net/packages/")))
#+end_src
** Fix for MELPA backwards dependencies
#+begin_src emacs-lisp
(defadvice package-compute-transaction
  (before
   package-compute-transaction-reverse (package-list requirements)
   activate compile)
  "reverse the requirements"
  (setq requirements (reverse requirements))
  (print requirements))
#+end_src
* Window layouts
** For screencasting
#+begin_src emacs-lisp
(setq fullscreen-screencast nil)
(defun setup-screencasting-layout ()
  (interactive)
  (require 'frame-fns)
  (delete-other-windows)
  (if fullscreen-screencast
    (progn
      (maximize-frame)
      (split-window-horizontally -80))
    (progn
      (shell-command (concat "wmctrl -r " (get-frame-name) " -e 0,100,100,1280,720")))
      (split-window-horizontally -50))
  (other-window 1)
  (switch-to-buffer "*compilation*")
  (split-window-vertically)
  (other-window 1)
  (eshell)
  (other-window 1)
  (if fullscreen-screencast
    (text-scale-set 2)
    (text-scale-set 1)))
#+end_src
** Normal mode
#+begin_src emacs-lisp
(defun setup-normal-layout ()
  (interactive)
  (delete-other-windows)
  (text-scale-set 0)
  (set-frame-size (selected-frame) column-wrap-hard default-frame-height))
#+end_src
** With compilation/shell buffers
#+begin_src emacs-lisp
(defun setup-dev-layout ()
  (interactive)
  (delete-other-windows)
  (text-scale-set 0)
  (set-frame-size (selected-frame) column-wrap-hard default-frame-height)
  (set-frame-width (selected-frame) 183)
  (sleep-for 1)
  (split-window-horizontally 103)
  (other-window 1)
  (switch-to-buffer "*compilation*")
  (split-window-vertically 40)
  (other-window 1)
  (eshell)
  (other-window 1))
#+end_src
** Key bindings
#+begin_src emacs-lisp
(global-set-key "\C-cw" 'setup-screencasting-layout)
(global-set-key "\C-cm" 'setup-dev-layout)
(global-set-key "\C-cn" 'setup-normal-layout)
#+end_src
* Start server
#+begin_src emacs-lisp
(require 'server)
(when (and (= emacs-major-version 24)
           (= emacs-minor-version 1)
           (eq system-type 'windows-nt))
  (defun server-ensure-safe-dir (dir) "Noop" t)) ; Suppress error "directory
                                        ; ~/.emacs.d/server is unsafe"
                                        ; on windows.
(server-start)
#+end_src
